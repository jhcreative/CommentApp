// Generated by CoffeeScript 1.7.1
var Gzip, fs, sysPath, zlib,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

fs = require('fs');

zlib = require('zlib');

sysPath = require('path');

module.exports = Gzip = (function() {
  Gzip.prototype.brunchPlugin = true;

  function Gzip(config) {
    var _ref, _ref1, _ref2, _ref3, _ref4;
    this.config = config;
    this._joinToPublic = __bind(this._joinToPublic, this);
    this.options = (_ref = (_ref1 = this.config) != null ? (_ref2 = _ref1.plugins) != null ? _ref2.gzip : void 0 : void 0) != null ? _ref : {};
    this.targets = [
      {
        path: this.config.paths["public"],
        ext: /\.html$/
      }, {
        path: this._joinToPublic(((_ref3 = this.options.paths) != null ? _ref3.javascript : void 0) || 'javascripts'),
        ext: /\.js$/
      }, {
        path: this._joinToPublic(((_ref4 = this.options.paths) != null ? _ref4.stylesheet : void 0) || 'stylesheets'),
        ext: /\.css$/
      }
    ];
  }

  Gzip.prototype.onCompile = function(generatedFiles) {
    var fileList, target, _i, _len, _ref, _results;
    if (!this.config.optimize) {
      return;
    }
    _ref = this.targets;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      target = _ref[_i];
      if (!fs.existsSync(target.path)) {
        break;
      }
      fileList = fs.readdirSync(target.path);
      _results.push(fileList.forEach((function(_this) {
        return function(file) {
          if (file.match(target.ext)) {
            return _this._compress(target.path, file);
          }
        };
      })(this)));
    }
    return _results;
  };

  Gzip.prototype._compress = function(path, file) {
    var gzip, input, input_path, output, output_path;
    gzip = zlib.createGzip({
      level: zlib.Z_BEST_COMPRESSION
    });
    input_path = "" + path + "/" + file;
    output_path = "" + path + "/" + file + ".gz";
    input = fs.createReadStream(input_path);
    output = fs.createWriteStream(output_path);
    input.pipe(gzip).pipe(output);
    if (!!this.options.removeOriginalFiles && fs.existsSync(input_path)) {
      fs.unlinkSync(input_path);
    }
    if (!!this.options.renameGzipFilesToOriginalFiles && fs.existsSync(input_path)) {
      return fs.renameSync(output_path, input_path);
    }
  };

  Gzip.prototype._joinToPublic = function(path) {
    return sysPath.join(this.config.paths["public"], path);
  };

  return Gzip;

})();
