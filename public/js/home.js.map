{"version":3,"sources":["app/scripts/home/home.controller.js","app/scripts/home/home.service.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"public/js/home.js","sourcesContent":["// comment_app home controller 'appHome'\n\nangular.module('appHome', [{\n  files: [\n    // '/css/home.css',\n  ]\n}])\n  .controller('HomeController',\n    ['appComments', 'store', function(appComments, store) {\n\n      // controller as\n      var home = this;\n      // init model\n      appComments.getItems().then(function(data) {\n        // what we'll work with\n        home.comments = data;\n        // for cross-module potential\n        store.home = home.comments;\n      });\n\n}]);\n","// comment_app home service\n\nangular.module('appHome')\n  .factory('appComments', ['$http', '$q', function($http, $q) {\n    return {\n      getItems: function() {\n\n        var deferred = $q.defer();\n        $http.get('/api/thread.json')\n          .success(function(data) {\n            var theseResults = data;\n            console.log('RAW: ', theseResults);\n\n            // convert topic array into keyed object\n            var raw = theseResults.topics,\n                numTopics = raw.length;\n            theseResults.model = {};\n\n            for (tI = 0; tI < numTopics; tI++) {\n              var thisTopic = raw[tI],\n                  thisKey = 'topic_' + tI;\n              theseResults.model[thisKey] = {};\n\n              var thisObject = theseResults.model[thisKey],\n                  numResponses = thisTopic.responses.length;\n\n              // set topic title & initial content\n              thisObject.id = thisTopic.responses[0].id;\n              thisObject.displaytitle = thisTopic.topictitle;\n              thisObject.displaycontent = thisTopic.responses[0].posttext.substring(3, (thisTopic.responses[0].posttext.length - 4));\n              thisObject.byparent = {};\n\n              // organize this topic's comments by parent\n              for (rI = 0; rI < numResponses; rI++) {\n\n                var thisResponse = thisTopic.responses[rI],\n                    thisParentKey = thisResponse.parentid;\n                thisResponse.posttext = thisResponse.posttext.substring(3, (thisTopic.responses[0].posttext.length - 4));\n\n                if (thisParentKey !== 0) {\n                  if (thisObject.byparent[thisParentKey]) {\n                    // push to existing array\n                    thisObject.byparent[thisParentKey].push(thisResponse);\n                  } else {\n                    // make new array\n                    thisObject.byparent[thisParentKey] = [];\n                    // add first element\n                    thisObject.byparent[thisParentKey].push(thisResponse);\n                  }\n                }\n\n              }\n\n              // recursive function to nest comments\n              function matchComments(byParent, parentId) {\n                var theseComments = byParent[parentId];\n                if (theseComments !== undefined) {\n                  // check for sub comments - recursive\n                  var num = theseComments.length;\n                  console.log(num);\n                  for (i = 0; i < num; i++) {\n                    thisComment = theseComments[i];\n                    if (byParent[thisComment.id]) {\n                      thisComment.theseComments = matchComments(byParent, thisComment.id);\n                    }\n                  }\n                }\n                return theseComments;\n              }\n\n              // recursive function to nest comments\n              thisObject.theseComments = matchComments(thisObject.byparent, thisObject.id);\n\n              // add processed topic to model\n              theseResults.model[thisKey] = thisObject;\n\n            }// end for loop\n\n            console.log('PROCESSED: ', theseResults);\n            deferred.resolve(theseResults);\n          });\n\n        return deferred.promise;\n\n      }\n    };\n  }]);\n"]}